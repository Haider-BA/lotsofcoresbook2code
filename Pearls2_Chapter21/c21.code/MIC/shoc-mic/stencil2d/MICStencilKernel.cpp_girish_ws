#if defined(__APPLE__)
#if _GLIBCXX_ATOMIC_BUILTINS == 1
#undef _GLIBCXX_ATOMIC_BUILTINS
#endif // _GLIBCXX_ATOMIC_BUILTINS
#endif // __APPLE__

#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <stdio.h>

#include "omp.h"
#include "math.h"
#include "offload.h"
#include "Timer.h"
#include "KNFStencil.cpp"

#define MAX_OMP_THREADS	256
#define LINESIZE		64
#define	SIMD_B			16

#define ALLOC   alloc_if(1)
#define FREE    free_if(1)
#define RETAIN  free_if(0)
#define REUSE   alloc_if(0)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Kernel Author:	Valentin Andrei	- valentin.andrei@intel.com	(SSG/SSD/PTAC/PAC Power & Characterization)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template <class T>
void
KNFStencil<T>::operator()( Matrix2D<T>& mtx, unsigned int nIters )
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    unsigned int uOMP_Threads 	= 240;
    unsigned int uRowPartitions = 60;
    unsigned int uColPartitions = 4;

    unsigned int uDimWithHalo	= mtx.GetNumRows();
    unsigned int uHaloWidth		= LINESIZE / sizeof(T);
    unsigned int uImgElements	= uDimWithHalo * uDimWithHalo;

    unsigned int uFilterSize	= 3; // Stencil 2D 9 Points
    unsigned int uHalfFilterSz	= (uFilterSize - 1) / 2;

    unsigned int uRowTiles		= (uDimWithHalo - 2 * uHaloWidth) / uRowPartitions;
    unsigned int uColTiles		= (uDimWithHalo - 2 * uHaloWidth) / uColPartitions;

	uRowTiles = (((uDimWithHalo - 2 * uHaloWidth) % uRowPartitions) > 0) ? uRowTiles + 1 : uRowTiles;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    __declspec(target(mic),	align(LINESIZE)) T* pIn = mtx.GetFlatData();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    __declspec(target(mic), align(sizeof(T)))	T wcenter	= this->wCenter;
    __declspec(target(mic), align(sizeof(T)))	T wdiag		= this->wDiagonal;
    __declspec(target(mic), align(sizeof(T)))	T wcardinal	= this->wCardinal;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	double tTotal = curr_second();
	#pragma offload target(mic) in(pIn:length(uImgElements) ALLOC RETAIN)
	{
		// Just copy pIn to compute the copy transfer time
	}

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	double tKernel = curr_second();
    #pragma offload target(mic) in(pIn:length(uImgElements) REUSE RETAIN)						\
								in(uColPartitions) in(uRowPartitions) in(uImgElements)			\
								in(uDimWithHalo) in(uHalfFilterSz) in(uRowTiles) in(uColTiles)	\
								in(wcenter) in(wdiag) in(wcardinal)
    {
        //T *pTmp	 = (T*)_mm_malloc(uImgElements * sizeof(T), LINESIZE);
        // memcpy(pTmp, pIn, uImgElements * sizeof(T));

        T *pTmp	 = (T*)pIn;
        T *pCrnt = (T*)_mm_malloc(uImgElements * sizeof(T), LINESIZE);

        #pragma omp parallel firstprivate(pTmp, pCrnt, uRowTiles, uColTiles, uHaloWidth, uHalfFilterSz, uDimWithHalo)
        {
			unsigned int uThreadId = omp_get_thread_num();

			unsigned int uRowId		= uThreadId / uColPartitions;
			unsigned int uColId		= uThreadId % uColPartitions;

			unsigned int uStartLine = (uRowId % uRowPartitions) * uRowTiles + uHalfFilterSz + uHaloWidth - 1;
			unsigned int uEndLine	= uStartLine + uRowTiles - 1;
			uEndLine 				= (uEndLine > uDimWithHalo - uHaloWidth) ? uDimWithHalo - uHaloWidth : uEndLine;

			unsigned int uStartCol	= (uColId % uColPartitions) * uColTiles + uHalfFilterSz + uHaloWidth - 1;
			unsigned int uEndCol	= uStartCol + uColTiles - 1;
			uEndCol 				= (uEndCol > uDimWithHalo) ? uDimWithHalo : uEndCol;

        	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			T	cardinal0	= 0.0;
			T	diagonal0	= 0.0;
			T	center0		= 0.0;

			/*
			T	cardinal[16];
			T	diagonal[16];
			T	center	[16];
			*/

			unsigned int cntIterations, i, j;

        	for (cntIterations = 0; cntIterations < nIters; cntIterations ++)
        	{
				// Do Stencil Operation
				for (i = uStartLine; i <= uEndLine; i++)
				{
					T * restrict pCenter 	= &pTmp [ i      * uDimWithHalo];
					T * restrict pTop 		= pCenter - uDimWithHalo;
					T * restrict pBottom 	= pCenter + uDimWithHalo;
					T * restrict pOut 		= &pCrnt[ i 	 * uDimWithHalo];

					__assume_aligned(pCenter, 	64);
					__assume_aligned(pTop, 		64);
					__assume_aligned(pBottom, 	64);
					__assume_aligned(pOut, 		64);

					#pragma vector nontemporal
					for (j = uStartCol; j < uEndCol; j++)
					{
						/*
						cardinal0 	= 	wcardinal * (pTmp[(i - 1) * uDimWithHalo + j] +
													 pTmp[(i + 1) * uDimWithHalo + j] +
													 pTmp[ i * uDimWithHalo + j - 1] +
													 pTmp[ i * uDimWithHalo + j + 1]);

						diagonal0 	= 	wdiag 	  *	(pTmp[(i - 1) * uDimWithHalo + j - 1] +
													 pTmp[(i - 1) * uDimWithHalo + j + 1] +
													 pTmp[(i + 1) * uDimWithHalo + j - 1] +
													 pTmp[(i + 1) * uDimWithHalo + j + 1]);

						center0		= 	wcenter   *	 pTmp[i * uDimWithHalo + j];

						pCrnt[i * uDimWithHalo + j]	= center0 + diagonal0 + cardinal0;
						*/

						cardinal0	= pCenter[j - 1] + pCenter[j + 1] + pTop[j] + pBottom[j];
						diagonal0	= pTop[j - 1] + pTop[j + 1] + pBottom[j - 1] + pBottom[j + 1];
						center0		= pCenter[j];

						pOut[j]		= wcardinal * cardinal0 + wdiag * diagonal0 + wcenter * center0;
					}

					/*
					for (j = uStartCol; j < uEndCol; j += 16)
					{
						#pragma vector
						for (k = j; k < j + 16; k++)
							cardinal[k - j] = pTmp[(i - 1) * uDimWithHalo + k];
						#pragma vector
						for (k = j; k < j + 16; k++)
							cardinal[k - j] += pTmp[(i + 1) * uDimWithHalo + k];
						#pragma vector aligned
						for (k = j; k < j + 16; k++)
							cardinal[k - j] += pTmp[i * uDimWithHalo + k - 1];
						#pragma vector aligned
						for (k = j; k < j + 16; k++)
							cardinal[k - j] += pTmp[i * uDimWithHalo + k + 1];

						#pragma vector
						for (k = j; k < j + 16; k++)
							diagonal[k - j] = pTmp[(i - 1) * uDimWithHalo + k - 1];
						#pragma vector
						for (k = j; k < j + 16; k++)
							diagonal[k - j] += pTmp[(i - 1) * uDimWithHalo + k + 1];
						#pragma vector
						for (k = j; k < j + 16; k++)
							diagonal[k - j] += pTmp[(i + 1) * uDimWithHalo + k - 1];
						#pragma vector
						for (k = j; k < j + 16; k++)
							diagonal[k - j] += pTmp[(i + 1) * uDimWithHalo + k + 1];

						#pragma vector aligned
						for (k = j; k < j + 16; k++)
							pCrnt[i * uDimWithHalo + k] = wcenter * pTmp[i * uDimWithHalo + j] + wcardinal * cardinal[k - j] + wdiag * diagonal[k - j];
					}
					*/
				}

				#pragma omp barrier
				;

				// Switch pointers
				T* pAux	= pTmp;
				pTmp 	= pCrnt;
				pCrnt	= pAux;
        	} // End For

        } // End Parallel

        // memcpy(pIn, pTmp, uImgElements * sizeof(T));

		// _mm_free(pTmp);

        _mm_free(pCrnt);
    } // End Offload
    tKernel = curr_second() - tKernel;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	#pragma offload target(mic) out(pIn:length(uImgElements) REUSE FREE)
	{
		// Just copy back pIn
	}
	tTotal = curr_second() - tTotal;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*
	double N		= (double) (uDimWithHalo - uHaloWidth);
	double fFLOP 	= 1000.0 * N * N * 11.0;
	double kFLOPS	= (fFLOP / (tKernel * 1e9));
	double tFLOPS	= (fFLOP / (tTotal * 1e9));

	printf("\n Kernel GFLOPS (no   PCIe) = %.3f", kFLOPS);
	printf("\n Total  GFLOPS (with PCIe) = %.3f\n", tFLOPS);
	*/
}

void
EnsureStencilInstantiation( void )
{
    KNFStencil<float> csf( 0, 0, 0, 0 );
    Matrix2D<float> mf( 2, 2 );
    csf( mf, 0);

    KNFStencil<double> csd( 0, 0, 0, 0 );
    Matrix2D<double> md( 2, 2 );
    csd( md, 0);
}